import importlib.util
import inspect
from pathlib import Path
from textwrap import dedent
from types import ModuleType

import pytest
from brewinglib.db.migrate import Migrations, MigrationsConfig
from brewinglib.db.types import DatabaseProtocol


@pytest.fixture
def config(database_sample_1: DatabaseProtocol, tmp_path: Path) -> MigrationsConfig:
    return MigrationsConfig(
        engine=database_sample_1.engine,
        metadata=database_sample_1.metadata,
        revisions_dir=tmp_path / "revisions",
    )


@pytest.fixture
def migrations(config: MigrationsConfig):
    return Migrations(config)


def load_module_from_file(path: Path) -> ModuleType:
    spec = importlib.util.spec_from_file_location(path.name, str(path.resolve()))
    if not spec or not spec.loader:
        raise ImportError(f"Could not load module from {path=!s}")
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module


def test_generate_migration_without_autogenerate(
    config: MigrationsConfig, migrations: Migrations
):
    config.revisions_dir.mkdir()
    # If we call generate
    migrations.generate_revision("gen 1", autogenerate=False)
    # then there will be a file generated in the revisions dir
    revisions_files = list(config.revisions_dir.glob("*.py"))
    assert len(revisions_files) == 1
    assert revisions_files[0].name == "rev_00000_gen_1.py"
    # And inspect its module contents are as expected.
    module = load_module_from_file(revisions_files[0])
    assert callable(module.upgrade)
    assert (
        inspect.getsource(module.upgrade).strip()
        == dedent(
            '''
        def upgrade() -> None:
            """Upgrade schema."""
            pass
        '''
        ).strip()
    )
    assert callable(module.downgrade)
    assert (
        inspect.getsource(module.downgrade).strip()
        == dedent(
            '''
        def downgrade() -> None:
            """Downgrade schema."""
            pass
        '''
        ).strip()
    )


def test_generate_migration_with_autogenerate(
    database_sample_1: DatabaseProtocol, tmp_path: Path
):
    # Given migrations instance
    config = MigrationsConfig(
        engine=database_sample_1.engine,
        metadata=database_sample_1.metadata,
        revisions_dir=tmp_path / "revisions",
    )
    migrations = Migrations(config)
    config.revisions_dir.mkdir()
    # If we call generate
    migrations.generate_revision("gen 1", autogenerate=True)
    # then there will be a file generated in the revisions dir
    revisions_files = list(config.revisions_dir.glob("*.py"))
    assert len(revisions_files) == 1
    assert revisions_files[0].name == "rev_00000_gen_1.py"
    # And inspect its module contents are as expected.
    module = load_module_from_file(revisions_files[0])
    assert callable(module.upgrade)
    assert (
        inspect.getsource(module.upgrade).strip()
        == dedent(
            '''
        def upgrade() -> None:
            """Upgrade schema."""
            # ### commands auto generated by Alembic - please adjust! ###
            pass
            # ### end Alembic commands ###
        '''
        ).strip()
    )
    assert callable(module.downgrade)
    assert (
        inspect.getsource(module.downgrade).strip()
        == dedent(
            '''
        def downgrade() -> None:
            """Downgrade schema."""
            # ### commands auto generated by Alembic - please adjust! ###
            pass
            # ### end Alembic commands ###
        '''
        ).strip()
    )
